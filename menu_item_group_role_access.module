<?php

/**
 * @file
 * Menu Item Group Role Access module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\GroupRoleInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function menu_item_group_role_access_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() == 'menu_link_content') {
    // Load all available group roles.
    $group_roles = \Drupal::entityTypeManager()->getStorage('group_role')->loadMultiple();

    // Sort the group roles alphabetically by label.
    uasort($group_roles, function ($a, $b) {
      return strcasecmp($a->label(), $b->label());
    });

    // Prepare the allowed values array.
    $allowed_values = [];
    foreach ($group_roles as $group_role) {
      if ($group_role instanceof GroupRoleInterface) {
        $label = $group_role->label();
        $group_scope = $group_role->get('scope');
        $allowed_values[$group_role->id()] = "<span title='$group_scope'>$label</span>";
      }
    }

    $fields['menu_item_group_role_field'] = BaseFieldDefinition::create('list_string')
      ->setSetting('allowed_values', $allowed_values)
      ->setLabel('Select Group Role')
      ->setDescription('Display Menu on the Basis of Group Role Permissions.')
      ->setRequired(FALSE)
      ->setCardinality(-1)
      ->setDisplayOptions('form', [
        'type' => 'options_buttons',
        'weight' => 6,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['menu_item_override_children'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Override children'))
      ->setDescription(t('With this option checked the children will adhere to the above selected roles. Children may then again override their own children by setting this option. Please note that you may need to turn the option "Overwrite internal link target access check" on for this to work properly.'))
      ->setCardinality(1)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
      ])
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'weight' => 4,
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function menu_item_group_role_access_form_menu_link_content_menu_link_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['menu_item_override_children'])) {
    // If parent inheritance is enabled show the field.
    $config = \Drupal::config('menu_item_group_role_access.config');

    if (!$config->get('inherit_parent_access')) {
      $form['menu_item_override_children']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_entity_field_access().
 *
 * We want to make sure that fields aren't being edited by those who shouldn't.
 */
function menu_item_group_role_access_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  if ($field_definition->getName() == 'menu_item_group_roles') {
    if ($operation == 'edit' && $account->hasPermission('edit menu_item_group_role_access')) {
      return AccessResult::allowed();
    }
    // Anything else on this field is forbidden.
    return AccessResult::forbidden();
  }
  return AccessResult::neutral();
}
